---
title: "OpenPrescription EDA"
author: "Juan Fonseca"
format: gfm
---

This work is based on data from [OpenPrescribing](https://openprescribing.net/).

## Obtaining boundaries

```{r}
library(sf)
library(tidyverse)
library(tmap)
```


### NHS boundaries

```{r}
CCG_boundaries <- geojsonsf::geojson_sf("https://openprescribing.net/api/1.0/org_location/?org_type=ccg") |> st_transform(27700)
```

## GP surgeries

Approximate locations of all registered GP surgeries can be obtained. For example, for Bradford (ICB code: `36J)`


```{r}
bradford_code <- "36J"
```


Reading the built-up areas data
```{r}
builtup_bounds <- st_read("OS Open Built Up Areas.gpkg",
                          layer = "os_open_built_up_areas")
```

Selecting the biggest builtup area within the NHS region

```{r}
bradford_zones <- builtup_bounds[CCG_boundaries[CCG_boundaries$code==bradford_code,],] |> slice_max(geometry_area_m)
```

```{r}
Bradford_Practices <- geojsonsf::geojson_sf(
  paste0("https://openprescribing.net/api/1.0/org_location/?q=",
         bradford_code)
  ) |> st_transform(27700)
```

```{r}
tmap_mode("view")
qtm(Bradford_Practices |> st_make_valid())
```


### Short acting beta agonist inhalers

See: <https://openprescribing.net/measure/saba/definition/>

Taken from the web:

> ***Why it matters:** Why Asthma Still Kills reports that high use of short acting beta agonists (salbutamol and terbutaline) and poor adherence to inhaled corticosteroids in asthma suggests poor control - these patients should be reviewed regularly to ensure good control.*
>
> *The NHS England National Medicines Optimisation Opportunities for 2023/24 identify improving patient outcomes from the use of inhalers as an area for improvement.*
>
> ***Description:** Prescribing of short acting beta agonist (SABA) inhalers - salbutamol and terbutaline - compared with prescribing of inhaled corticosteroid inhalers and SABA inhalers*

```{r}
saba <- read_csv(
  paste0("https://openprescribing.net/api/1.0/measure_by_practice/?format=csv&org=",
         bradford_code,
         "&parent_org_type=ccg&measure=saba")) 
```

### Exploring the data

It is possible to extract the trends of both metrics. Below a graphical extract of one of the metrics for Bradford.

```{r}
head(saba)
saba |> 
  ggplot(aes(x = date,
             y = calc_value,
             groups = org_id))+
  geom_line(alpha = 0.15, col = "dodgerblue2",linewidth = 0.65)+
  stat_smooth(geom = "line",method = "lm",alpha = 0.2, col = "dodgerblue4",linewidth = 0.7)+ 
  theme_minimal()+
  labs(title = "Ratio of Prescribed SABA over inhaled corticosteroid inhalers + SABA",
       y = "value"
  )
```

#### Calculating an overall trend

First let's check the data quality for all practices and remove the NAs.

```{r}
saba |>
  drop_na() |>
  summarise(n_reports = n(),
            .by = org_id) |>
  arrange(n_reports) 
```

We create a vector with the ids that have more than 10 records

```{r}
ids_to_include <- saba |>
  drop_na() |>
  summarise(n_reports = n(),
            .by = org_id) |>
  arrange(n_reports) |> 
  filter(n_reports>10) |> 
  pull(org_id)
```

#### Sub-setting only the relevant practices

Extracting the start month from the dataset

```{r}
start_month <- min(saba$date)
```

Defining a function to calculate the month number of the record

```{r}
diff_month <- function(start, end){
  length(seq(from=start, to=end, by='month')) - 1
}
```

Calculating the month difference

```{r}
saba$month <- vapply(saba$date,\(x){
  diff_month(start_month,x)},numeric(1))
```

Subsetting the practices within the built-up area

```{r}
city_practices <- Bradford_Practices[bradford_zones,] |> pull(code)
```


```{r}
clean_data <- saba |>
  filter(org_id %in% ids_to_include,org_id %in% city_practices)
```


```{r}
saba_processed <- clean_data |> 
  nest(data = -org_id) |> 
  mutate(lm.model = map(.x = data,
                        \(x) {
                          lm(calc_value ~ month, data = x)
                          }),
         coef = map_dbl(lm.model,\(x){coef(x)[2]})
  )

```


Joining trends
```{r}
bradford_trends <- Bradford_Practices |>
  inner_join(
    saba_processed |>
      select(org_id,coef),
    by = c("code"="org_id"))
```

Mapping the trends

```{r}
base_osm <- tmaptools::read_osm(bradford_trends)

tm_shape(base_osm)+
  tm_rgb()+
  tm_shape(bradford_trends |> 
  mutate(abs.size = abs(coef))
  )+
  tm_dots(col = "coef",
          midpoint = 0,
          palette = "Spectral",
          size = "abs.size",
          style = "fisher")+tm_layout(bg.color = "gray")
```

A check of the distribution of the trends
```{r}
saba_processed |> 
  filter(org_id %in% bradford_trends$code) |> 
  ggplot(aes(coef,fill = cut(coef,
                             breaks = seq(-0.02,0.02,0.0005))))+
  geom_histogram(breaks =  seq(-0.02,0.02,0.0005))+
  theme_minimal()+
  scale_x_continuous(labels = scales::percent)+
  scale_fill_brewer(palette = "RdYlBu",direction = -1)+
  labs(x = "coef (avg % change per month)")+
  theme(legend.position = "none")
```


```{r}
saba_processed |>
  filter(org_id %in% bradford_trends$code) |> 
  ggplot(aes(coef))+
  stat_ecdf(geom = "step")+
  theme_minimal()+
  geom_vline(xintercept = 0,alpha = 0.4,col ="red",linewidth = 1)+
  scale_x_continuous(labels = scales::percent)+
  scale_fill_brewer(palette = "RdYlBu",direction = -1)+
  labs(x = "coef (avg % change per month)")+
  theme(legend.position = "none")
```

Calculating the overall trend 

```{r}
data_overall <- clean_data |>
  summarise(across(numerator:denominator,sum),
            .by = c(date, month)) |> 
  mutate(calc_value = numerator/denominator)
```

```{r}
data_overall |> 
  ggplot(aes(date,calc_value))+
  geom_line(alpha = 0.3,
            col = "dodgerblue3")+
  geom_smooth(method = "lm",se = F,col = "dodgerblue4")+
  theme_minimal()
```

Fitting a simple linear model

```{r}
lm(calc_value~month,data = data_overall) |> 
  summary()
```


### CAZ boundaries analysis

CAZ boundaries have been obtained from [here](https://spatialdata-cbmdc.hub.arcgis.com/datasets/9955cfe9c4104194bbb227821751aabf/explore?location=53.795554%2C-1.730762%2C11.20)


Reading the CAZ boundaries
```{r}
CAZ_bounds <- sf::st_read("Clean_Air_Zone_Boundary.geojson") |> sf::st_transform(27700)
```


```{r}
mapview::mapview(CAZ_bounds)
```


Identifying practices within the CAZ

```{r}
ids_within_CAZ <- bradford_trends[CAZ_bounds,] |> pull(code)
```


Adding a column to identify the ones within and outside the CAZ

```{r}
bradford_trends$withinCAZ <- bradford_trends$code %in% ids_within_CAZ
```

Exploring the distribution of coefficients (avg change per month in SABA):
```{r}
bradford_trends |> 
  ggplot(aes(coef,col = withinCAZ))+
  geom_vline(xintercept = 0,col = "goldenrod",alpha = 0.6,linewidth = 1)+
  stat_ecdf()+
  theme_minimal()
```











