[
  {
    "objectID": "Multiple_regions_analysis.html",
    "href": "Multiple_regions_analysis.html",
    "title": "Multiple Regions",
    "section": "",
    "text": "Based on the main analysis\nlibrary(sf)\n\nLinking to GEOS 3.11.2, GDAL 3.8.2, PROJ 9.3.1; sf_use_s2() is TRUE\n\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n\n\n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nlibrary(tmap)\n\nBreaking News: tmap 3.x is retiring. Please test v4, e.g. with\nremotes::install_github('r-tmap/tmap')",
    "crumbs": [
      "Multiple regions",
      "Extracting data"
    ]
  },
  {
    "objectID": "Multiple_regions_analysis.html#nhs-boundaries",
    "href": "Multiple_regions_analysis.html#nhs-boundaries",
    "title": "Multiple Regions",
    "section": "NHS boundaries",
    "text": "NHS boundaries\nboundaries for the NSH regions\n\nCCG_boundaries &lt;- geojsonsf::geojson_sf(\n  \"https://openprescribing.net/api/1.0/org_location/?org_type=ccg\"\n  ) |&gt;\n  st_transform(27700)",
    "crumbs": [
      "Multiple regions",
      "Extracting data"
    ]
  },
  {
    "objectID": "Multiple_regions_analysis.html#loading-the-built-up-areas",
    "href": "Multiple_regions_analysis.html#loading-the-built-up-areas",
    "title": "Multiple Regions",
    "section": "Loading the built-up areas",
    "text": "Loading the built-up areas\nReading the built-up areas data\n\nbuiltup_bounds &lt;- st_read(\"OS Open Built Up Areas.gpkg\",\n                          layer = \"os_open_built_up_areas\")\n\nReading layer `os_open_built_up_areas' from data source \n  `C:\\Users\\ts18jpf\\OneDrive - University of Leeds\\03_PhD\\00_Misc_projects\\Eng-Presc-Data\\OS Open Built Up Areas.gpkg' \n  using driver `GPKG'\nSimple feature collection with 8585 features and 7 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 65300 ymin: 10000 xmax: 655625 ymax: 1177650\nProjected CRS: OSGB36 / British National Grid\n\n\n\nIdentifying the largest built-up areas within each region\n\nall_BA_selected &lt;- do.call(\n  bind_rows,\n  lapply(CCG_boundaries$code,\n         \\(t_code){\n           \n           t_nhs &lt;- CCG_boundaries[CCG_boundaries$code==t_code,]\n           t_nhs_buffered &lt;- st_buffer(t_nhs,dist = 2e3)               \n                          \n           # Subsetting the biggest built-up NHS area\n           builtup_bounds[t_nhs,\n                          ][t_nhs_buffered,\n                            op = st_within] |&gt;\n             slice_max(geometry_area_m) |&gt;\n                        mutate(\n                          org_code  = t_code) \n  }))\n\nA quick check of the largest built-up areas within each NHS region\n\ntmap_mode(\"view\")\n\ntmap mode set to interactive viewing\n\ntm_shape(CCG_boundaries)+\n  tm_polygons(border.col = \"black\",col = \"white\",alpha = 0.2)+\n  tm_shape(all_BA_selected)+\n  tm_fill(\"dodgerblue3\")",
    "crumbs": [
      "Multiple regions",
      "Extracting data"
    ]
  },
  {
    "objectID": "Multiple_regions_analysis.html#running-the-analisys-for-all-regions",
    "href": "Multiple_regions_analysis.html#running-the-analisys-for-all-regions",
    "title": "Multiple Regions",
    "section": "Running the analisys for all regions",
    "text": "Running the analisys for all regions\n\nall_saba_raw &lt;- do.call(\n  bind_rows,\n  lapply(CCG_boundaries$code, \\(t_code) {\n    read_csv(\n      paste0(\n        \"https://openprescribing.net/api/1.0/measure_by_practice/?format=csv&org=\",\n        t_code,\n        \"&parent_org_type=ccg&measure=saba\"\n      ),\n      col_types = cols(\n        measure = col_character(),\n        org_type = col_character(),\n        org_id = col_character(),\n        org_name = col_character(),\n        date = col_date(format = \"\"),\n        numerator = col_double(),\n        denominator = col_double(),\n        calc_value = col_double(),\n        percentile = col_double()\n      )\n    )\n  }))\n\n\nall_practices_raw &lt;- do.call(\n  bind_rows,\n  lapply(CCG_boundaries$code, \\(t_code) {\n    geojsonsf::geojson_sf(\n      paste0(\"https://openprescribing.net/api/1.0/org_location/?q=\",\n         t_code)) |&gt;\n      st_transform(27700) |&gt; \n      mutate(par_code = t_code)\n  }))\n\n\nOverall trends\nIdentifying the practices without all records\n\ncount_records &lt;- all_saba_raw |&gt;\n        drop_na() |&gt;\n        summarise(n_reports = n(), .by = org_id)\n\nPlotting the distribution of records per practice\n\nggplot(count_records,\n       aes(n_reports))+\n  stat_ecdf()+\n  scale_y_continuous(labels = scales::label_percent())\n\n\n\n\n\n\n\n\nExtracting the IDs of the practices with all records\n\npractices_complete &lt;- count_records |&gt;\n  filter(n_reports == max(n_reports)) |&gt; \n  pull(org_id)\n\nCalculating overall trend using the prectices with complete records\n\noverall_saba &lt;- all_saba_raw |&gt;\n  filter(org_id %in% practices_complete) |&gt; \n  summarise(across(numerator:denominator, sum), .by = c(date)) |&gt;\n        mutate(calc_value = numerator / denominator)\n\n\n# Defining function for month delta\ndiff_month &lt;- function(start, end) {\n  length(seq(from = start, to = end, by = 'month')) - 1\n}\n\n# Doing all the month transforming for fitting a model\nstart_month &lt;- min(overall_saba$date)\noverall_saba$month &lt;- vapply(overall_saba$date, \\(x) {\n  diff_month(start_month, x)\n}, numeric(1))\n\nAveraged time series\n\noverall_saba |&gt; \nggplot(aes(x = date, y = calc_value))+\n  geom_line(col = \"dodgerblue2\", alpha = 0.3)+\n  # geom_smooth(method = \"lm\",se = F,\n  #             col = \"dodgerblue4\",\n  #             linewidth = 1)+\n  scale_y_continuous(labels = scales::label_percent())+\n  theme_minimal()\n\n\n\n\n\n\n\n\nAverage linear trend\n\noverall_saba |&gt; \nggplot(aes(x = date, y = calc_value))+\n  geom_line(col = \"dodgerblue2\", alpha = 0.3)+\n  geom_smooth(method = \"lm\",se = F,\n              col = \"dodgerblue4\",\n              linewidth = 1)+\n  scale_y_continuous(labels = scales::label_percent())+\n  theme_minimal()\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\n\n\n\n\n\nTime series analysis using timetk\n\nlibrary(timetk)\nanomalised_saba &lt;- overall_saba |&gt; anomalize(date,calc_value)\n\nfrequency = 12 observations per 1 year\n\n\ntrend = 12 observations per 1 year\n\n\nDecomposing the time series\n\nanomalised_saba |&gt;\nplot_anomalies_decomp(\n.date_var = date,\n.interactive = FALSE\n)\n\n\n\n\n\n\n\n\nShowing anomalies\n\nanomalised_saba |&gt;\n  plot_anomalies(date,\n                 .interactive = F)\n\n\n\n\n\n\n\n\n\n\n\nComparing NHS regions\nSummarising trends for the major built-up area in each region\n\nall_ccg_summarised &lt;- do.call(\n  bind_rows,\n  lapply(\n    CCG_boundaries$code,\n    \\(t_code){\n      # Subsetting the biggest built-up NHS area\n      main_BA &lt;- all_BA_selected[all_BA_selected$org_code == t_code, ]\n      \n      # Extracting the practices for that NHS area\n      Practices &lt;- all_practices_raw[all_practices_raw$par_code == t_code, ][main_BA, ]\n      \n      # Extracting the SABA results for that area\n      saba &lt;- all_saba_raw[all_saba_raw$org_id %in% Practices$code, ]\n      # # Identifying the practices with more than 10 records\n      # ids_to_include &lt;- saba |&gt;\n      #   drop_na() |&gt;\n      #   summarise(n_reports = n(), .by = org_id) |&gt;\n      #   arrange(n_reports) |&gt;\n      #   filter(n_reports &gt; 10) |&gt;\n      #   pull(org_id)\n      \n      # Defining function for month delta\n      diff_month &lt;- function(start, end) {\n        length(seq(from = start, to = end, by = 'month')) - 1\n      }\n      \n      # Doing all the month transforming for fitting a model\n      start_month &lt;- min(saba$date)\n      saba$month &lt;- vapply(saba$date, \\(x) {\n        diff_month(start_month, x)\n      }, numeric(1))\n      \n      # Identifying the practices within the main built-up area\n      city_practices &lt;- Practices[main_BA, ] |&gt; pull(code)\n      \n      # Producing a clean SABA dataset\n      # (no outliers nor practices out of main urban area)\n      \n      clean_data &lt;- saba |&gt;\n        filter(org_id %in% practices_complete, org_id %in% city_practices)\n      \n      clean_data |&gt;\n        summarise(across(numerator:denominator, sum), .by = c(date, month)) |&gt;\n        mutate(calc_value = numerator / denominator, org_code  = t_code)\n    }\n  )\n)\n\nJoining with the CCG table to obtain the names\n\nall_data_names &lt;- all_ccg_summarised |&gt;\n  left_join(CCG_boundaries |&gt;\n              st_drop_geometry() |&gt;\n              select(name,code),by = c(\"org_code\"=\"code\"))\n\nA quick visualisation of the linear trends of Bradford and Liverpool\n\nall_data_names|&gt; \n  ggplot(aes(x = date,y = calc_value,group = org_code))+\n  geom_line(col = \"dodgerblue2\",alpha = 0.3)+\n  geom_smooth(data =all_data_names |&gt; \n                filter(org_code %in% c(\"36J\",\"99A\")),\n              aes(col = name,fill = name),\n              method = \"lm\",\n              # se = F,\n              # col = \"dodgerblue4\",\n              linewidth = 1)+\n  theme_minimal()+\n  theme(legend.position = \"bottom\")\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\n\n\n\n\n\n\nProcessing Built-up areas with CAZ\n\nCAZ_lst &lt;- read_csv(\"CAZ_list.csv\",col_types = cols_only(\n  Area = col_character(),\n  Type = col_character()\n))\n\nSub-setting the built-up areas with CAZ zones\n\nCAZ_BA &lt;- builtup_bounds |&gt; semi_join(CAZ_lst,by=c(\"gsscode\"=\"Area\"))\n\n\nall_caz_summarised &lt;- do.call(\n  bind_rows,\n  lapply(\n    CAZ_BA$gsscode,\n    \\(t_code){\n      # Subsetting the biggest built-up NHS area\n      main_BA &lt;- CAZ_BA[CAZ_BA$gsscode == t_code, ]\n      \n      # Extracting the practices for that NHS area\n      Practices &lt;- all_practices_raw[main_BA, ]\n      \n      # Extracting the SABA results for that area\n      saba &lt;- all_saba_raw[all_saba_raw$org_id %in% Practices$code, ]\n      \n      # Defining function for month delta\n      diff_month &lt;- function(start, end) {\n        length(seq(from = start, to = end, by = 'month')) - 1\n      }\n      \n      # Doing all the month transforming for fitting a model\n      start_month &lt;- min(saba$date)\n      saba$month &lt;- vapply(saba$date, \\(x) {\n        diff_month(start_month, x)\n      }, numeric(1))\n      \n      \n      # Producing a clean SABA dataset\n      # (no outliers nor practices out of main urban area)\n      \n      clean_data &lt;- saba |&gt;\n        filter(org_id %in% practices_complete)\n      \n      clean_data |&gt;\n        summarise(across(numerator:denominator, sum), .by = c(date, month)) |&gt;\n        mutate(calc_value = numerator / denominator,\n               name  = CAZ_BA$name1_text[CAZ_BA$gsscode == t_code],\n               type = CAZ_lst$Type[CAZ_lst$Area==t_code])\n    }\n  )\n)",
    "crumbs": [
      "Multiple regions",
      "Extracting data"
    ]
  },
  {
    "objectID": "detailed_results.html",
    "href": "detailed_results.html",
    "title": "Results",
    "section": "",
    "text": "This section allows you to explore the overall trend for multiple areas simultaneously. Average trends have been calculated for practices with all records within the main built-up area.",
    "crumbs": [
      "Multiple regions",
      "Results"
    ]
  },
  {
    "objectID": "detailed_results.html#results-by-built-up-areas-with-caz",
    "href": "detailed_results.html#results-by-built-up-areas-with-caz",
    "title": "Results",
    "section": "Results by Built-up Areas with CAZ",
    "text": "Results by Built-up Areas with CAZ\n\nviewof caztype = Inputs.select(caztypes, {value: \"CAZ D\", label: \"Type\"})\n\n\n\n\n\n\n\ncazfiltered = transpose(cazdata).filter(function(record) {\nreturn caztype.includes(record.type) ;\n})\n\n\n\n\n\n\n\nPlot.plot({\n  y: {domain: [0,70],\n    grid: true,\n    label: \"SABA ratio(%)\",\n    transform: (f) =&gt; (f*100)\n  },\n  x: {\n  transform: (x) =&gt; d3.timeParse(\"%Y-%m-%d\")(x),\n  interval: \"month\"\n  },\n  color: {legend: true},\n  marks: [\n    Plot.ruleY([0]),\n    Plot.lineY(cazfiltered,\n    {x: \"date\",\n    y: \"calc_value\",\n    stroke: \"name\",\n    marker: \"dot\",\n    strokeOpacity: 0.3}),\n    Plot.linearRegressionY(cazfiltered,\n    {x: \"date\",\n    y: \"calc_value\",\n    stroke: \"name\"})\n    ]\n})\n\n\n\n\n\n\nLinar trends (Avg % Change per month)",
    "crumbs": [
      "Multiple regions",
      "Results"
    ]
  },
  {
    "objectID": "detailed_results.html#trends-in-each-nhs-region",
    "href": "detailed_results.html#trends-in-each-nhs-region",
    "title": "Results",
    "section": "Trends in each NHS region",
    "text": "Trends in each NHS region\nSelect the start month to calculate the linear trend\n\nviewof month_min = Inputs.range(\n  [0, 60],\n  {value: 28, step: 1, label: \"Start month:\"}\n)\n\n\n\n\n\n\nSelect the NHS regions of interest (max 6):\n\nviewof names = Inputs.select(lstNames, {multiple: 6, label: \"NHS Regions\",value: [\"NHS BRADFORD DISTRICT AND CRAVEN\",\"NHS LIVERPOOL\"]})\n\n\n\n\n\n\n\nrfiltered = transpose(mydata).filter(function(record) {\nreturn month_min &lt; record.month && names.includes(record.name) ;\n})\n\n\n\n\n\n\n\nPlot.plot({\n  y: {domain: [0,70],\n    grid: true,\n    label: \"SABA ratio(%)\",\n    transform: (f) =&gt; (f*100)\n  },\n  x: {\n  transform: (x) =&gt; d3.timeParse(\"%Y-%m-%d\")(x),\n  interval: \"month\"\n  },\n  color: {legend: true},\n  marks: [\n    Plot.ruleY([0]),\n    Plot.lineY(transpose(mydata),\n    {x: \"date\",\n    y: \"calc_value\",\n    stroke: \"#aaa7ad\",\n    z: \"name\",\n    strokeOpacity: 0.2}),\n    Plot.lineY(rfiltered,\n    {x: \"date\",\n    y: \"calc_value\",\n    stroke: \"name\",\n    marker: \"dot\",\n    strokeOpacity: 0.6}),\n    Plot.linearRegressionY(rfiltered,\n    {x: \"date\",\n    y: \"calc_value\",\n    stroke: \"name\"})\n    ]\n})",
    "crumbs": [
      "Multiple regions",
      "Results"
    ]
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site",
    "crumbs": [
      "About"
    ]
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Exploring the OpenPrescribing Dataset",
    "section": "",
    "text": "This website contains some exploratory analysis of OpenPrescribing data.",
    "crumbs": [
      "Home"
    ]
  },
  {
    "objectID": "Bradford_analysis.html",
    "href": "Bradford_analysis.html",
    "title": "Bradford",
    "section": "",
    "text": "This work is based on data from OpenPrescribing.",
    "crumbs": [
      "Bradford"
    ]
  },
  {
    "objectID": "Bradford_analysis.html#obtaining-boundaries",
    "href": "Bradford_analysis.html#obtaining-boundaries",
    "title": "Bradford",
    "section": "Obtaining boundaries",
    "text": "Obtaining boundaries\n\nlibrary(sf)\n\nLinking to GEOS 3.11.2, GDAL 3.8.2, PROJ 9.3.1; sf_use_s2() is TRUE\n\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n\n\n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nlibrary(tmap)\n\nBreaking News: tmap 3.x is retiring. Please test v4, e.g. with\nremotes::install_github('r-tmap/tmap')\n\n\n\nNHS boundaries\n\nCCG_boundaries &lt;- geojsonsf::geojson_sf(\"https://openprescribing.net/api/1.0/org_location/?org_type=ccg\") |&gt; st_transform(27700)\n\nWarning in readLines(con): incomplete final line found on\n'https://openprescribing.net/api/1.0/org_location/?org_type=ccg'",
    "crumbs": [
      "Bradford"
    ]
  },
  {
    "objectID": "Bradford_analysis.html#gp-surgeries",
    "href": "Bradford_analysis.html#gp-surgeries",
    "title": "Bradford",
    "section": "GP surgeries",
    "text": "GP surgeries\nApproximate locations of all registered GP surgeries can be obtained. For example, for Bradford (ICB code: 36J)\n\nbradford_code &lt;- \"36J\"\n\nReading the built-up areas data\n\nbuiltup_bounds &lt;- st_read(\"OS Open Built Up Areas.gpkg\",\n                          layer = \"os_open_built_up_areas\")\n\nReading layer `os_open_built_up_areas' from data source \n  `C:\\Users\\ts18jpf\\OneDrive - University of Leeds\\03_PhD\\00_Misc_projects\\Eng-Presc-Data\\OS Open Built Up Areas.gpkg' \n  using driver `GPKG'\nSimple feature collection with 8585 features and 7 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 65300 ymin: 10000 xmax: 655625 ymax: 1177650\nProjected CRS: OSGB36 / British National Grid\n\n\nSelecting the biggest builtup area within the NHS region\n\nbradford_zones &lt;- builtup_bounds[CCG_boundaries[CCG_boundaries$code==bradford_code,],] |&gt; slice_max(geometry_area_m)\n\n\nBradford_Practices &lt;- geojsonsf::geojson_sf(\n  paste0(\"https://openprescribing.net/api/1.0/org_location/?q=\",\n         bradford_code)\n  ) |&gt; st_transform(27700)\n\nWarning in readLines(con): incomplete final line found on\n'https://openprescribing.net/api/1.0/org_location/?q=36J'\n\n\n\ntmap_mode(\"view\")\n\ntmap mode set to interactive viewing\n\nqtm(Bradford_Practices |&gt; st_make_valid())\n\n\n\n\n\n\nShort acting beta agonist inhalers\nSee: https://openprescribing.net/measure/saba/definition/\nTaken from the web:\n\nWhy it matters: Why Asthma Still Kills reports that high use of short acting beta agonists (salbutamol and terbutaline) and poor adherence to inhaled corticosteroids in asthma suggests poor control - these patients should be reviewed regularly to ensure good control.\nThe NHS England National Medicines Optimisation Opportunities for 2023/24 identify improving patient outcomes from the use of inhalers as an area for improvement.\nDescription: Prescribing of short acting beta agonist (SABA) inhalers - salbutamol and terbutaline - compared with prescribing of inhaled corticosteroid inhalers and SABA inhalers\n\n\nsaba &lt;- read_csv(\n  paste0(\"https://openprescribing.net/api/1.0/measure_by_practice/?format=csv&org=\",\n         bradford_code,\n         \"&parent_org_type=ccg&measure=saba\")) \n\nRows: 5368 Columns: 9\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (4): measure, org_type, org_id, org_name\ndbl  (4): numerator, denominator, calc_value, percentile\ndate (1): date\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\n\nExploring the data\nIt is possible to extract the trends of both metrics. Below a graphical extract of one of the metrics for Bradford.\n\nhead(saba)\n\n# A tibble: 6 × 9\n  measure org_type org_id org_name   date       numerator denominator calc_value\n  &lt;chr&gt;   &lt;chr&gt;    &lt;chr&gt;  &lt;chr&gt;      &lt;date&gt;         &lt;dbl&gt;       &lt;dbl&gt;      &lt;dbl&gt;\n1 saba    practice B83021 FARFIELD … 2019-04-01       839        1438      0.583\n2 saba    practice B82020 CROSS HIL… 2019-04-01       548         991      0.553\n3 saba    practice B82028 FISHER ME… 2019-04-01       452        1108      0.408\n4 saba    practice B82053 DYNELEY H… 2019-04-01       350         773      0.453\n5 saba    practice B82099 GRASSINGT… 2019-04-01         0           0     NA    \n6 saba    practice B83002 ILKLEY & … 2019-04-01        95         233      0.408\n# ℹ 1 more variable: percentile &lt;dbl&gt;\n\nsaba |&gt; \n  ggplot(aes(x = date,\n             y = calc_value,\n             groups = org_id))+\n  geom_line(alpha = 0.15, col = \"dodgerblue2\",linewidth = 0.65)+\n  stat_smooth(geom = \"line\",method = \"lm\",alpha = 0.2, col = \"dodgerblue4\",linewidth = 0.7)+ \n  theme_minimal()+\n  labs(title = \"Ratio of Prescribed SABA over inhaled corticosteroid inhalers + SABA\",\n       y = \"value\"\n  )\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\nWarning: Removed 1276 rows containing non-finite outside the scale range\n(`stat_smooth()`).\n\n\nWarning: Removed 1270 rows containing missing values or values outside the scale range\n(`geom_line()`).\n\n\n\n\n\n\n\n\n\n\nCalculating an overall trend\nFirst let’s check the data quality for all practices and remove the NAs.\n\nsaba |&gt;\n  drop_na() |&gt;\n  summarise(n_reports = n(),\n            .by = org_id) |&gt;\n  arrange(n_reports) \n\n# A tibble: 76 × 2\n   org_id n_reports\n   &lt;chr&gt;      &lt;int&gt;\n 1 B83638         6\n 2 B83013         7\n 3 B83011         8\n 4 B83007        13\n 5 B83040        16\n 6 B83021        31\n 7 B83006        31\n 8 B82020        32\n 9 B82028        32\n10 B83023        33\n# ℹ 66 more rows\n\n\nWe create a vector with the ids that have more than 10 records\n\nids_to_include &lt;- saba |&gt;\n  drop_na() |&gt;\n  summarise(n_reports = n(),\n            .by = org_id) |&gt;\n  arrange(n_reports) |&gt; \n  filter(n_reports&gt;10) |&gt; \n  pull(org_id)\n\n\n\nSub-setting only the relevant practices\nExtracting the start month from the dataset\n\nstart_month &lt;- min(saba$date)\n\nDefining a function to calculate the month number of the record\n\ndiff_month &lt;- function(start, end){\n  length(seq(from=start, to=end, by='month')) - 1\n}\n\nCalculating the month difference\n\nsaba$month &lt;- vapply(saba$date,\\(x){\n  diff_month(start_month,x)},numeric(1))\n\nSubsetting the practices within the built-up area\n\ncity_practices &lt;- Bradford_Practices[bradford_zones,] |&gt; pull(code)\n\n\nclean_data &lt;- saba |&gt;\n  filter(org_id %in% ids_to_include,org_id %in% city_practices)\n\n\nsaba_processed &lt;- clean_data |&gt; \n  nest(data = -org_id) |&gt; \n  mutate(lm.model = map(.x = data,\n                        \\(x) {\n                          lm(calc_value ~ month, data = x)\n                          }),\n         coef = map_dbl(lm.model,\\(x){coef(x)[2]})\n  )\n\nJoining trends\n\nbradford_trends &lt;- Bradford_Practices |&gt;\n  inner_join(\n    saba_processed |&gt;\n      select(org_id,coef),\n    by = c(\"code\"=\"org_id\"))\n\nMapping the trends\n\nbase_osm &lt;- tmaptools::read_osm(bradford_trends)\n\ntm_shape(base_osm)+\n  tm_rgb()+\n  tm_shape(bradford_trends |&gt; \n  mutate(abs.size = abs(coef))\n  )+\n  tm_dots(col = \"coef\",\n          midpoint = 0,\n          palette = \"Spectral\",\n          size = \"abs.size\",\n          style = \"fisher\")+tm_layout(bg.color = \"gray\")\n\nLegend for symbol sizes not available in view mode.\n\n\nOpenStreetMapData read with read_osm is static, so not usable in view mode. Please use tm_basemap or tm_tiles, with the provider name set to \"OpenStreetMap.Mapnik\"\n\n\n\n\n\n\nA check of the distribution of the trends\n\nsaba_processed |&gt; \n  filter(org_id %in% bradford_trends$code) |&gt; \n  ggplot(aes(coef,fill = cut(coef,\n                             breaks = seq(-0.02,0.02,0.0005))))+\n  geom_histogram(breaks =  seq(-0.02,0.02,0.0005))+\n  theme_minimal()+\n  scale_x_continuous(labels = scales::percent)+\n  scale_fill_brewer(palette = \"RdYlBu\",direction = -1)+\n  labs(x = \"coef (avg % change per month)\")+\n  theme(legend.position = \"none\")\n\n\n\n\n\n\n\n\n\nsaba_processed |&gt;\n  filter(org_id %in% bradford_trends$code) |&gt; \n  ggplot(aes(coef))+\n  stat_ecdf(geom = \"step\")+\n  theme_minimal()+\n  geom_vline(xintercept = 0,alpha = 0.4,col =\"red\",linewidth = 1)+\n  scale_x_continuous(labels = scales::percent)+\n  scale_fill_brewer(palette = \"RdYlBu\",direction = -1)+\n  labs(x = \"coef (avg % change per month)\")+\n  theme(legend.position = \"none\")\n\n\n\n\n\n\n\n\nCalculating the overall trend\n\ndata_overall &lt;- clean_data |&gt;\n  summarise(across(numerator:denominator,sum),\n            .by = c(date, month)) |&gt; \n  mutate(calc_value = numerator/denominator)\n\n\ndata_overall |&gt; \n  ggplot(aes(date,calc_value))+\n  geom_line(alpha = 0.3,\n            col = \"dodgerblue3\")+\n  geom_smooth(method = \"lm\",se = F,col = \"dodgerblue4\")+\n  theme_minimal()\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\n\n\n\n\nFitting a simple linear model\n\nlm(calc_value~month,data = data_overall) |&gt; \n  summary()\n\n\nCall:\nlm(formula = calc_value ~ month, data = data_overall)\n\nResiduals:\n       Min         1Q     Median         3Q        Max \n-0.0229290 -0.0070584  0.0005366  0.0078236  0.0193570 \n\nCoefficients:\n              Estimate Std. Error t value Pr(&gt;|t|)    \n(Intercept)  5.472e-01  2.693e-03 203.178  &lt; 2e-16 ***\nmonth       -6.652e-04  7.742e-05  -8.591 5.51e-12 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 0.01065 on 59 degrees of freedom\nMultiple R-squared:  0.5558,    Adjusted R-squared:  0.5482 \nF-statistic: 73.81 on 1 and 59 DF,  p-value: 5.513e-12\n\n\n\n\n\nCAZ boundaries analysis\nCAZ boundaries have been obtained from here\nReading the CAZ boundaries\n\nCAZ_bounds &lt;- sf::st_read(\"Clean_Air_Zone_Boundary.geojson\") |&gt; sf::st_transform(27700)\n\nReading layer `Clean_Air_Zone_Boundary' from data source \n  `C:\\Users\\ts18jpf\\OneDrive - University of Leeds\\03_PhD\\00_Misc_projects\\Eng-Presc-Data\\Clean_Air_Zone_Boundary.geojson' \n  using driver `GeoJSON'\nSimple feature collection with 1 feature and 3 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: -1.818735 ymin: 53.7682 xmax: -1.717377 ymax: 53.84148\nGeodetic CRS:  WGS 84\n\n\n\nmapview::mapview(CAZ_bounds)\n\n\n\n\n\nIdentifying practices within the CAZ\n\nids_within_CAZ &lt;- bradford_trends[CAZ_bounds,] |&gt; pull(code)\n\nAdding a column to identify the ones within and outside the CAZ\n\nbradford_trends$withinCAZ &lt;- bradford_trends$code %in% ids_within_CAZ\n\nExploring the distribution of coefficients (avg change per month in SABA):\n\nbradford_trends |&gt; \n  ggplot(aes(coef,col = withinCAZ))+\n  geom_vline(xintercept = 0,col = \"goldenrod\",alpha = 0.6,linewidth = 1)+\n  stat_ecdf()+\n  theme_minimal()",
    "crumbs": [
      "Bradford"
    ]
  }
]