---
title: "Multiple Regions"
author: "Juan Fonseca"
---

Based on the main analysis

```{r}
library(sf)
library(tidyverse)
library(tmap)
```


## NHS boundaries

boundaries for the NSH regions

```{r}
#| warning: false
#| error:  false
CCG_boundaries <- geojsonsf::geojson_sf(
  "https://openprescribing.net/api/1.0/org_location/?org_type=ccg"
  ) |>
  st_transform(27700)
```

## Loading the built-up areas

Reading the built-up areas data
```{r}
builtup_bounds <- st_read("OS Open Built Up Areas.gpkg",
                          layer = "os_open_built_up_areas")
```

### Identifying the largest built-up areas within each region

```{r}
#| eval: false
all_BA_selected <- do.call(
  bind_rows,
  lapply(CCG_boundaries$code,
         \(t_code){
           
           t_nhs <- CCG_boundaries[CCG_boundaries$code==t_code,]
           t_nhs_buffered <- st_buffer(t_nhs,dist = 2e3)               
                          
           # Subsetting the biggest built-up NHS area
           builtup_bounds[t_nhs,
                          ][t_nhs_buffered,
                            op = st_within] |>
             slice_max(geometry_area_m) |>
                        mutate(
                          org_code  = t_code) 
  }))
```

```{r}
#| eval: false
#| include: false
st_write(all_BA_selected,"selected_BuiltAreas.gpkg",delete_dsn = T)
```

```{r}
#| include: false
all_BA_selected <- st_read("selected_BuiltAreas.gpkg")
```

A qquick check of the largest built-up areas within each NHS region
```{r}
tmap_mode("view")
tm_shape(CCG_boundaries)+
  tm_polygons(border.col = "black",col = "white",alpha = 0.2)+
  tm_shape(all_BA_selected)+
  tm_fill("dodgerblue3")
```

## Running the analisys for all regions

```{r}
#| eval: false
#| label: download-saba
all_saba_raw <- do.call(
  bind_rows,
  lapply(CCG_boundaries$code, \(t_code) {
    read_csv(
      paste0(
        "https://openprescribing.net/api/1.0/measure_by_practice/?format=csv&org=",
        t_code,
        "&parent_org_type=ccg&measure=saba"
      ),
      col_types = cols(
        measure = col_character(),
        org_type = col_character(),
        org_id = col_character(),
        org_name = col_character(),
        date = col_date(format = ""),
        numerator = col_double(),
        denominator = col_double(),
        calc_value = col_double(),
        percentile = col_double()
      )
    )
  }))
```


```{r}
#| eval: false
#| label: download-practices
all_practices_raw <- do.call(
  bind_rows,
  lapply(CCG_boundaries$code, \(t_code) {
    geojsonsf::geojson_sf(
      paste0("https://openprescribing.net/api/1.0/org_location/?q=",
         t_code)) |>
      st_transform(27700) |> 
      mutate(par_code = t_code)
  }))
```


```{r}
#| eval: false
#| include: false
save(CCG_boundaries,
     all_BA_selected,
     all_saba_raw,
     all_practices_raw,
     file = "all_data.RData")
```
  
```{r, load_data_selected_BA}
#| include: false
load("all_data.RData")
```

Summarising trends for the major built-up area in each region
  

```{r}
all_ccg_summarised <- do.call(
  bind_rows,
  lapply(
    CCG_boundaries$code,
    \(t_code){
      # Subsetting the biggest built-up NHS area
      main_BA <- all_BA_selected[all_BA_selected$org_code == t_code, ]
      
      # Extracting the practices for that NHS area
      Practices <- all_practices_raw[all_practices_raw$par_code == t_code, ][main_BA, ]
      
      # Extracting the SABA results for that area
      saba <- all_saba_raw[all_saba_raw$org_id %in% Practices$code, ]
      # Identifying the practices with more than 10 records
      ids_to_include <- saba |>
        drop_na() |>
        summarise(n_reports = n(), .by = org_id) |>
        arrange(n_reports) |>
        filter(n_reports > 10) |>
        pull(org_id)
      
      # Defining function for month delta
      diff_month <- function(start, end) {
        length(seq(from = start, to = end, by = 'month')) - 1
      }
      
      # Doing all the month transforming for fitting a model
      start_month <- min(saba$date)
      saba$month <- vapply(saba$date, \(x) {
        diff_month(start_month, x)
      }, numeric(1))
      
      # Identifying the practices within the main built-up area
      city_practices <- Practices[main_BA, ] |> pull(code)
      
      # Producing a clean SABA dataset
      # (no outliers nor practices out of main urban area)
      
      clean_data <- saba |>
        filter(org_id %in% ids_to_include, org_id %in% city_practices)
      
      clean_data |>
        summarise(across(numerator:denominator, sum), .by = c(date, month)) |>
        mutate(calc_value = numerator / denominator, org_code  = t_code)
    }
  )
)
  
```

Joining with the CCG table to obtain the names

```{r}
all_data_names <- all_ccg_summarised |>
  left_join(CCG_boundaries |>
              st_drop_geometry() |>
              select(name,code),by = c("org_code"="code"))
```


A quick visualisation of the trends of Bradford and Liverpool

```{r}
all_data_names|> 
  ggplot(aes(x = date,y = calc_value,group = org_code))+
  geom_line(col = "dodgerblue2",alpha = 0.3)+
  geom_smooth(data =all_data_names |> 
                filter(org_code %in% c("36J","99A")),
              aes(col = name),
              method = "lm",se = F,
              # col = "dodgerblue4",
              linewidth = 1)+
  theme_minimal()
```